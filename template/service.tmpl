<?php
// +-------------------------------------------------------------------------
// | Copyright (C) 2016 Yunify, Inc.
// +-------------------------------------------------------------------------
// | Licensed under the Apache License, Version 2.0 (the "License");
// | you may not use this work except in compliance with the License.
// | You may obtain a copy of the License in the LICENSE file, or at:
// |
// | http://www.apache.org/licenses/LICENSE-2.0
// |
// | Unless required by applicable law or agreed to in writing, software
// | distributed under the License is distributed on an "AS IS" BASIS,
// | WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// | See the License for the specific language governing permissions and
// | limitations under the License.
// +-------------------------------------------------------------------------

{{ "" }}
{{- $capsule := . -}}
{{- $service := .Data.Service -}}
{{- $subServices := .Data.SubServices -}}
namespace QingStor\SDK\Service;

use QingStor\SDK\Signer;
use QingStor\SDK\Builder;
use QingStor\SDK\Exception;

# {{$service.Name | camelCase}} provides {{$service.Name}} Service API (API Version {{$service.APIVersion}})

class {{$service.Name | camelCase}}Service
{

    function __construct($config, $zone="")
    {
        $this->config = $config;
        $this->zone = $zone;
    }

    {{range $_, $operation := $service.Operations}}
    /**
     * {{$operation.ID | camelCase}}: {{$operation.Description}}
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     *
     * @return response
     */
    public function {{$operation.ID | camelCase}}Request($options=array())
    {
        $operation = array(
            "Method" => "{{$operation.Request.Method}}",
            "Uri" => "{{$operation.Request.URI}}",
            "Headers" => array(
                "Host" => $this->config->host
            ),
            "Params" => array(),
            "Elements" => array(),
            "Properties" => array(),
            "Body" => null
        );
        $builder = new Builder\QingStor($this->config, $operation);
        $request = $builder->parse();
        $signer = new Signer(
            $request,
            $this->config->access_key_id,
            $this->config->secret_access_key
        );
        return $signer;
    }

    /**
     * {{$operation.ID | camelCase}}: {{$operation.Description}}
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function {{$operation.ID | camelCase}}()
    {
        $signer = $this->{{$operation.ID | camelCase}}Request($options=array());
        $response = $this->config->client->send(
            $signer->sign()
        );
        return $response;
    }

    /**
     * {{$operation.ID | camelCase}}Query: {{$operation.ID | camelCase}}'s Query Sign Way
     {{- if $operation.DocumentationURL}}
     * @link {{$operation.DocumentationURL}} Documentation URL
     {{- end}}
     {{- range $id, $property := $operation.Request.Headers.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Params.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     {{- range $id, $property := $operation.Request.Elements.Properties}}
     * @param {{$property.Type}} "{{$property.ID}}" {{$property.Description}}
     {{- end}}
     *
     * @return \GuzzleHttp\Psr7\Response
     */
    public function {{$operation.ID | camelCase}}Query($expires,$options=array())
    {
        $signer = $this->{{$operation.ID | camelCase}}Request($options);
        $response = $this->config->client->send(
            $signer->query_sign($expires)
        );
        return $response;
    }
    {{end}}

    public function Bucket($bucket_name, $zone)
    {
        $properties = array(
            'bucket-name' => $bucket_name,
            'zone' => $zone
        );
        return new Bucket($this->config, $properties);
    }
}
